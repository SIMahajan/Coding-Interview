1) print hello word
#include<stdio.h>
void main(){
    // first way by printf
    printf("Hello, World!");

    // secound way puts
    puts("Hello, World!");
    
    //third way by write
    write(1, "Hello, World!\n", 17);

    // charecter by charecter
    char *str = "Hello, World!\n";
    while (*str)
    {
        putchar(*str++);
    }
}

/* Hello, World!Hello, World!
Hello, World!
Hello, World!*/

2)Add-two-number

#include <stdio.h>
1. Basic Addition
void main()
{

    int a, b, sum;
    printf("Enter two integers: ");
    scanf("%d %d", &a, &b);
    sum = a + b;
    printf("Sum: %d", sum);
}

2. Using a Function

int add(int x, int y)
{
    return x + y;
    }
    void main()
    {

        int a, b, sum;
        printf("Enter two integers: ");
        scanf("%d %d", &a, &b);
        sum = add(a, b);
        printf("Sum: %d\n", sum);
    }

3. Using Pointers

int main()
{
    int a = 5;
    int b = 3;
    int *p1 = &a;
    int *p2 = &b;
    int sum = *p1 + *p2;
    printf("Sum: %d\n", sum);
    return 0;
}

4. Using Arrays

int main()
{
    int nums1[] = {1, 2, 3};
    int nums2[] = {4, 5, 6};
    int sum[3];
    for (int i = 0; i < 3; i++)
    {
        sum[i] = nums1[i] + nums2[i];
    }
    for (int i = 0; i < 3; i++)
    {
        printf("Sum of pair %d: %d\n", i + 1, sum[i]);
    }
    return 0;
}

5. Using Structures

struct Numbers
{
    int a;
    int b;
};

int main()
{
    // Initialize the structure
    struct Numbers nums = {5, 3};
    // Add the numbers
    int sum = nums.a + nums.b;
    // Print the result
    printf("Sum: %d\n", sum);
    return 0;
}

6. Using Recursion

 //Recursive function to add two Numbers

int add(int a, int b)
{
    if (b == 0)
    {
        return a;
    }
    return add(a + 1, b - 1);
}

int main()
{
    int a = 5;
    int b = 3;
    int sum = add(a, b);
    printf("Sum: %d\n", sum);
    return 0;
}

3) prime number:-A prime number is a natural number greater than 1 and is completely divisible only by 1 and itself. 

#include <stdbool.h>
#include <stdio.h>
void main()
{
    int count = 0, N = 1;
    printf("Is %d prime?\n", N);
    if (N <= 1)
    {
        count += 1;
    }
    for (int i = 2; i < N; i++)
    {

        if (N % i == 0)
        {
            count += 1;
        }
    }

    if (count <= 0)
    {
        printf("Yes");
    }
    else
    {
        printf("No");
    }
}

// using function

// bool isPrime(int N)
// {
//     if (N <= 1)
//     {
//         return false;
//     }
//        for (int i = 2; i < N; i++)
//     {

//        if (N % i == 0)
//         {
//             return false;
//         }
//     }

//     return true;
// }

// int main()
// {
//     int N = 29;
//     printf("Is %d prime?\n", N);

//     if (isPrime(N))
//     {
//         printf("Yes");
//     }
//     else
//     {
//         printf("No");
//     }

//     return 0;
// }

// by using complexity

// #include <math.h>
// #include <stdbool.h>
// #include <stdio.h>

// bool isPrime(int N)
// {
//     // If number is less than/equal to 1, it is not prime
//     if (N <= 1)
//     {
//         return false;
//     }

//     // If the number is 2 or 3, it is prime
//     if (N <= 3)
//     {
//         return true;
//     }

//     // If the number is divisible by 2 or 3, it is not prime
//     if (N % 2 == 0 || N % 3 == 0)
//     {
//         return false;
//     }

//     // Check for divisors from 5 to the square root of N
//     for (int i = 5; i * i <= N; i += 6)
//     {

//         // If N is divisible by i or (i + 2), it is not
//         // prime
//         if (N % i == 0 || N % (i + 2) == 0)
//         {
//             return false;
//         }
//     }

//     // If no divisors are found, it is prime
//     return true;
// }

// // Driver code
// int main()
// {
//     int N = 29;
//     printf("Is %d prime?\n", N);

//     if (isPrime(N))
//     {
//         printf("Yes\n");
//     }
//     else
//     {
//         printf("No\n");
//     }

//     return 0;
// }

4)ASCII Value of a Character
void main()
{
    char c = '@';

    // %d displays the integer value of
    // a character
    // %c displays the actual character
    printf("The ASCII value of %c is %d", c, c);
}

5)Swap Two Numbers
#include <stdio.h>

int main()
{
    int a = 5, b = 10, temp;
    printf("Before swapping: a = %d, b = %d\n", a, b);

    // Swapping values of a and  b
    temp = a;
    a = b;
    b = temp;

    printf("After swapping: a = %d, b = %d\n", a, b);
    return 0;
}
/*Before swapping: a = 5, b = 10
After swapping: a = 10, b = 5*/

// Without Using a Temporary Variable

// int main()
// {
//     int a = 5, b = 10;
//     printf("Before swapping: a = %d, b = %d\n", a, b);

//     // Arithmetic operations to swap values
//     a = a + b;
//     b = a - b;
//     a = a - b;

//     printf("After swapping: a = %d, b = %d\n", a, b);
//     return 0;
// }
/*Before swapping: a = 5, b = 10
After swapping: a = 10, b = 5*/

// Using Bitwise XOR Operator
// int main()
// {
//     int a = 5, b = 10;
//     printf("Before swapping: a = %d, b = %d\n", a, b);
//     // 1 ^ 1 = 0
//     // 1 ^ 0 = 1
//     // 0 ^ 1 = 1
//     // 0 ^ 0 = 0
//     // Apply XOR operations in the given order to swap values
//     a = a ^ b; // a(1111) = a(0101) ^ b(1010);
//     b = a ^ b; // b(0101) = a(1111) ^ b(1010);
//     a = a ^ b; // a(1010) = a(1111) ^ b(0101);

//     printf("After swapping: a = %d, b = %d\n", a, b);
//     return 0;
// }


6) Program to Check Whether a Number is Positive, Negative, or Zero
#include <stdio.h>
int main()
{
    int N = 10;
    if (N == 0)
    {
        printf("Zeri\n");
    }
    else if (N < 0)
    {
        printf("Negative\n");
    }
    else
    {
        printf("Positive \n");
    }
    return 0;
}


7)Program to Check for Odd or Even Number

A number that is completely divisible by 2 is an even number and a number that is not completely divisible by 2 leaving a non-zero remainder is an odd number.
even-0,2,4,6,8,10,etc
odd-1,3,5,7,9,etc

#include <stdio.h>

int main()
{
    int N = 101;

    int r = N % 2;
    if (r == 0){
        printf("Even");
    }
    else{
        printf("Odd");
    }
    return 0;
}

// using Bitwise AND operator
// int main()
// {
//     int N = 101;
//     if (N & 1){
//         printf("Odd\n");
//     }
//     else{
//         printf("Even\n");
//     }
//     return 0;
// }



8)Program to Check  Vowel or Consonant
#include <stdio.h>
int main()
{
    char ch = 'A';
    if (ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'i' || ch == 'I' || ch == 'o' || ch == 'O' || ch == 'u' || ch == 'U')
    {

        printf("The character %c is a vowel.\n", ch);
    }
    else {
        printf("The character %c is a consonant.\n", ch);
    }

    return 0;
}

// using strchr() Function

// #include <stdio.h>
// #include <string.h>

// int isVowel(char ch)
// {
//     // Make the list of vowels
//     char vowels[] = "aeiouAEIOU";
//     return (strchr(vowels, ch) != NULL);
// }

// int main()
// {
//     if (isVowel('a'))
//         printf("a is vowel\n");
//     else
//         printf("a is consonant\n");
//     return 0;
// }


9)program to Find the Largest Number Among Three Numbers
#include <stdio.h>
int main()
{
    int c = 10, b = 22, a = 9;

    if (a >= b)
    {
        if (a >= c)
            printf("%d is the largest number.", a);
        else
            printf("%d is the largest number.", c);
    }
    else
    {
        if (b >= c)
            printf("%d is the largest number.", b);
        else
            printf("%d is the largest number.", c);
    }

    return 0;
}
 // Using Compound Expression in if-else
// int main()
// {
//     int a = 11, b = 2, c = 9;

//     // Finding max using compound expressions
//     if (a >= b && a >= c)
//         printf("%d is the largest number.", a);
//     else if (b >= a && b >= c)
//         printf("%d is the largest number.", b);
//     else
//         printf("%d is the largest number.", c);

//     return 0;
// }

// Using Temporary Variable
// int main()
// {
//     int a = 10, b = 22, c = 9;

//     // Assume a is the largest
//     int max = a;

//     // If b is larger than max
//     if (max < b)
//         max = b;

//     // If c is larger than max
//     if (max < c)
//         max = c;

//     printf("%d is the largest number.", max);
//     return 0;
// }



10)Program to Calculate Sum of Natural Numbers
Natural Numbers=0,1,2,3,4,5,6,7,8,9,10,etc.
// 1)Using while loop
#include <stdio.h>
int main()
{
    int i=1, sum = 0, n = 10;
    while (i <= n)
    {
        sum += i;
        i++;
    }
    printf("Sum = %d", sum);
    return 0;
}

// 2)Using for loop
// int main()
// {
//     int sum = 0 , n = 10;
//     for (int i = 1; i <= n;i++)
//     {
//         sum += i;
//     }
//     printf("Sum = %d", sum);
//     return 0;
// }

// // 3)Using recursion
// int fun(int a)
// {
//     if (a != 0)
//     {
//         return a + fun(a - 1);
//     }
//     else
//     {
//         return a;
//     }
// }
// void main()
// {
//     int a, sum = 0, n = 12;
//     printf("Sum = %d", fun(n));
// }

// 4)Using Functions

// int sumofnaturalnumbers(int num)
// {
//     int i, s = 0;
//     for (i = 0; i <= num; i++)
//     {
//         s += i;
//     }
//     printf("Sum = %d", s);
// }

// int main()
// {

//     int number = 10;
//     sumofnaturalnumbers(number);
//     return 0;
// }

11) Print Alphabets Loop From A to Z Using Loop
#include <stdio.h>
//using for loop
int main()
{
    char i;

    printf("The Alphabets from A to Z are: \n");
    for (i = 'A'; i <= 'Z'; i++)
    {
        printf("%c ", i);
    }

    printf("\nThe Alphabets from a to z are: \n");

    for (i = 'a'; i <= 'z'; i++)
    {
        printf("%c ", i);
    }

    return 0;
}
// using ASCII values
// int main()
// {
//     int i;
//     printf("Alphabets from (A-Z) are:\n");

//     // ASCII value of A=65 and Z=90
//     for (i = 65; i <= 90; i++)
//     {
//         printf("%c ", i);
//     }

//     printf("\nAlphabets from (a-z) are:\n");

//     // ASCII value of a=97 and z=122
//     for (i = 97; i <= 122; i++)
//     {
//         printf("%c ", i);
//     }

//     return 0;
// }

// wsing while loop

// int main()
//     {
//         char i;
//         i = 'A';
//         printf("The Alphabets from A to Z are: \n");
//         while(i <= 'Z')
//         {
//             printf("%c ", i);
//             i++;
//         }

//         printf("\nThe Alphabets from a to z are: \n");
//         i = 'a';
//         while( i <= 'z')
//         {
//             printf("%c ", i);
//             i++;
//         }

//         return 0;
//     }
// using do while loop

// int main()
// {
//     char i;
//     i = 'A';
//     printf("The Alphabets from A to Z are: \n");
   
//     do{
//         printf("%c ", i);
//         i++;
//     } while (i <= 'Z');

//         printf("\nThe Alphabets from a to z are: \n");
//     i = 'a';
   
//     do{
//         printf("%c ", i);
//         i++;
//     } while (i <= 'z');

//         return 0;
// }

12)Contol flow Leap Year Program
#include <stdio.h>

int factorial(int N)
{
    int fact = 1, i;
    for (i = 1; i <= N; i++)
    {
        fact *= i;
    }
    return fact;
}
int main()
{
    int N = 5;
    int fact = factorial(N);
    printf("Factorial of %d is %d", N, fact);
    return 0;
}

// using recurtion

//  int factorial( int N)
// {
//     // Loop from 1 to N to get the factorial
//     if(N==1)
//     {
//         return N;
//     }else{
//         return N * factorial(N - 1);
//     }
// }

// int main()
// {
//     int N = 5;
//     int fact = factorial(N);
//     printf("Factorial of %d is %d", N, fact);
//     return 0;
// }

14)
15)
16)
17)
18)
19)
20)


100)Program to Make a Simple Calculator 
#include <stdio.h>
#include <float.h>
void main()
{
    int a, b, add,mult,div,sub,mod;
    printf("insert first number ");
    scanf("%d", &a);
    printf("insert second number ");
    scanf("%d", &b);
    add = a + b;
    printf("The Addition of %d and %d is %d \n", a, b, add);
    sub = a - b;
    printf("The substraction of %d and %d is %d\n", a, b, sub);
    mult = a * b;
    printf("The multiplication of %d and %d is %d\n", a, b, mult);
    div = a / b;
    printf("The divission of %d and %d is %d\n", a, b, div);
    mod = a % b;
    printf("The modulo of %d and %d is %d\n", a, b, mod);
}
/* insert first number 10
insert second number 5
The Addition of 10 and 5 is 15
The substraction of 10 and 5 is 5
The multiplication of 10 and 5 is 50
The divission of 10 and 5 is 2
The modulo of 10 and 5 is 0*/

// using switch case
// double simpleCalc(double num1, double num2, char op)
// {
//     double res;

//     // Define all four operations in the corresponding
//     // switch-case
//     switch (op)
//     {
//     case '+':
//         res = num1 + num2;
//         break;
//     case '-':
//         res = num1 - num2;
//         break;
//     case '*':
//         res = num1 * num2;
//         break;
//     case '/':
//         res = num1 / num2;
//         break;
//     default:
//         printf("Error! Operator is not correct.\n");
//         return -DBL_MAX;
//     }
//     return res;
// }

// int main()
// {
//     char op;
//     double num1, num2, res;

//     // Read the operator
//     printf("Enter an operator (+, -, *, /): ");
//     scanf("%c", &op);

//     // Read the two numbers
//     printf("Enter two operands: ");
//     scanf("%lf %lf", &num1, &num2);

//     res = simpleCalc(num1, num2, op);

//     // Print the result
//     if (res != -DBL_MAX)
//         printf("Result: %.2lf\n", res);

//     return 0;
// }

// Using if-else Statement
// double simpleCalc(double num1, double num2, char op)
// {
//     int res;

//     // Perform the operation corresponding to the given
//     // operator
//     if (op == '+')
//         res = num1 + num2;
//     else if (op == '-')
//         res = num1 - num2;
//     else if (op == '*')
//         res = num1 * num2;
//     else if (op == '/')
//         res = num1 / num2;
//     else
//     {
//         printf("Error! Operator is not correct.\n");
//         return -DBL_MAX;
//     }

//     return res;
// }

// int main()
// {
//     char op;
//     double num1, num2, res;

//     // Read the operator
//     printf("Enter an operator (+, -, *, /): ");
//     scanf("%c", &op);

//     // Read the two numbers
//     printf("Enter two operands: ");
//     scanf("%lf %lf", &num1, &num2);

//     // Evalute
//     res = simpleCalc(num1, num2, op);

//     // Print the result
//     if (res != -DBL_MAX)
//         printf("Result: %.2lf\n", res);

//     return 0;
// }


3)change pointer value it also change actualvalue

#include <stdio.h>

void main()
{
    // First number
    int a = 5;
    // Pointer to the first number
    int *p1 = &a;
    // change pointer value it also change actualvalue
    *p1 = 10;
    printf("pointer %d\n", *p1);
    printf("real %d\n", a);
    // Pointer to the second number
}
/*pointer 10
real 10*/